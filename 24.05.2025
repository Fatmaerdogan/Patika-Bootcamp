# 📊 Verinin Karar Yolculuğu

## 1. Collect (Veri Toplama)
Her sektörde ihtiyaç duyulan veriler farklı kaynaklardan toplanır.

**Örnek kaynaklar:**
- Log dosyaları  
- Sensör verileri  
- Kullanıcı girdileri  
- Sosyal medya  

---

## 2. Move/Store (Depolama)
Toplanan veriler bir veri kaynağında tarihsel olarak tutulmalıdır.

- Veri akışının sürdürülebilirliği için bir **pipeline (veri hattı)** kurulmalıdır.
- **Amaç:** Güvenli ve sürekli veri akışı sağlamak.

---

## 3. Explore/Transform (Keşfet / Dönüştür)
- Ham veriler üzerinde ihtiyaçlara göre dönüşüm ve temizleme işlemleri yapılır.
- Verinin işlenebilir formata gelmesi sağlanır.

> 🕒 Veri analizi sürecinin %70-85’i bu aşamada geçer.

---

## 4. Data Cleaning (Veri Temizliği)
Verilerde karşılaşılabilecek sorunlar:
- Eksik/kayıp, hatalı, tekrar eden ya da fazla özellikli veriler
- Çok büyük veri hacmi
- Format sorunları
- Güncel olmayan ya da çelişkili veriler

---

## 5. Aggregate/Label (Özetleme / Etiketleme)
- Temizlenen veriler analiz ve modelleme için hazırlanır.
- **Feature selection** (özellik seçimi) ve **labeling** (etiketleme) yapılır.

> Örnek: Görüntüdeki nesnelerin kutularla etiketlenmesi (object detection).

---

## 6. Learn/Optimize (Öğrenme / Optimizasyon)
- Hazırlanan veriler makine öğrenmesi algoritmalarıyla eğitilir.
- **Hedef:** Modeller kurarak öngörüler veya karar destek sistemleri geliştirmek.

---

## 7. Report (Raporlama)
- Model çıktıları ya da analiz sonuçları, iş birimlerinin kullanabileceği raporlar şeklinde sunulur.
- Görselleştirme: Grafikler, dashboard’lar, infografikler ile desteklenir.

---

# 📈 CRISP-DM Süreci – Veri Analizinde Yöntem

## 1. İşin Anlaşılması
- İş hedefleri netleştirilir.  
- Hangi sorulara cevap aranıyor?  
- Hangi problemler çözülmek isteniyor?

## 2. Verinin Anlaşılması
- Gerekli veriler toplanır, ilk inceleme yapılır.
- Veri tipleri, kalitesi, eksiklikleri analiz edilir.

## 3. Veri Hazırlama
- Modelleme için uygun hale getirilmiş veri hazırlanır.
- Temizleme, dönüştürme, seçme işlemleri yapılır.

## 4. Modelleme
- İstatistiksel ve makine öğrenmesi modelleri kurulur.
- Farklı algoritmalar denenir ve değerlendirilir.

## 5. Değerlendirme
- Modellerin performansı ölçülür.
- İş hedeflerine uygunluk test edilir.

## 6. Kullanıma Sunma
- Model sonuçları raporlanır ve sistem içine entegre edilir.

---

# 🗃️ Veri Tabanı – Temel Notlar

## 1. Veri Yönetimi ve Depolama
Veritabanı, bilgilerin düzenli, sistemli ve erişilebilir şekilde dijital olarak saklandığı ortamlardır.

**Amaç:** Verileri arama, düzenleme, analiz etme gibi işlemler için hazır tutmak.

---

## 2. Neden Veri Tabanı Kullanılır?
- Büyük veriyi düzenli tutmak  
- Veriye hızlı ve güvenli erişim sağlamak  
- Eşzamanlı çok kullanıcıyla çalışabilmek  
- Yedekleme ve hata önleme  

---

## 3. Veri Tabanı Bileşenleri

| Kavram   | Açıklama                                 |
|----------|------------------------------------------|
| Tablo    | Verilerin satır ve sütunlarla tutulduğu yapı |
| Satır    | Her bir kayıt (örnek: 1 müşteri)         |
| Kolon    | Kayıtların özellikleri (örnek: Ad, Soyad)|
| İndeks   | Veriyi sıralı ve hızlı erişilebilir tutan yapı |

---

## 4. Veri Tabanı Platformları

| Platform            | Açıklama                                           |
|---------------------|----------------------------------------------------|
| Microsoft SQL Server | Kurumsal Microsoft sistemleri için yaygın         |
| Oracle Database      | Büyük ve karmaşık sistemlerde tercih edilir       |
| MySQL                | Açık kaynak, web projelerinde yaygın              |
| PostgreSQL           | Güçlü, açık kaynaklı, veri tutarlılığı yüksek     |

---

## 5. Kullanım Alanları
- Sağlık sektörü  
- Finans ve bankacılık  
- E-ticaret ve perakende  
- Üretim ve sanayi  
- Kamu kurumları  
- Eğitim sektörü  
- Ulaşım ve lojistik  
- Telekomünikasyon  
- İnsan kaynakları  

---

# 💾 Temel SQL Komutları – Özet

## 🔍 Veri Sorgulama ve İşleme

| Komut     | Açıklama                                                  |
|-----------|-----------------------------------------------------------|
| SELECT    | Veritabanından kayıtları çeker.                           |
| WHERE     | Koşul belirterek veriyi filtreler.                        |
| ORDER B


/////////////////////////////////////////////////////////////////////////////////

---1) SELECT KOMUTU YAZARKEN KOLONLAR VE FROM TABLO BELİRLENİR. Database'in nerede olduğu önemlidir.
--KOLON İSİMLERİNİ DİREKT ATABİLİRİ.
---

SELECT USERNAME_,NAMESURNAME FROM USERS

SELECT * FROM USERS

--2_INSERT KOMUTU

INSERT INTO
USERS
(ID,USERNAME_, PASSWORD_, NAMESURNAME, EMAIL, GENDER, BIRTHDATE, CREATEDDATE, TELNR1, TELNR2)
VALUES
(9679,'KIZBASINA','1234','KIZBASINADERNEK','KIZBASINA@GMAIL.COM','K','2025-01-01','2025-01-01','5325323232','5325323232')

--3_UPDATE KOMUTU
SELECT * FROM USERS 
UPDATE USERS
SET TELNR1='553555544' WHERE ID=9679


--4-DELETE KOMUTU
DELETE FROM TABLOADI OLARAK KULLANILIR.

DELETE USERS WHERE ID=9679


--5-WHERE KOMUTU
SELECT * FROM TABLOADI WHERE KOLON=DEĞER

--  =  EŞİTTİR
SELECT * FROM USERS WHERE GENDER='K'

--<> EŞİT DEĞİLDİR
SELECT * FROM USERS WHERE GENDER<>'K'

--> BÜYÜKTÜR
SELECT * FROM USERS WHERE ID>7000

--< KÜÇÜKTÜR
SELECT * FROM USERS WHERE ID<1000

-->= BÜYÜKTÜR YA DA EŞİTTİR
SELECT * FROM USERS WHERE ID>=1000

--<= KÜÇÜKTÜR YA DA EŞİTTİR
SELECT * FROM USERS WHERE ID<=1000


--BETWEEN  ARASINDADIR
SELECT * FROM USERS WHERE ID BETWEEN 10 AND 15

--LIKE İLE BAŞLAR,İLE BİTER,İÇERİR
SELECT * FROM USERS WHERE NAMESURNAME LIKE 'MU%'
SELECT * FROM USERS WHERE NAMESURNAME LIKE '%MU'
SELECT * FROM USERS WHERE NAMESURNAME LIKE '%MUŞ%'

--IN  İÇİNDEDİR
SELECT * FROM USERS WHERE ID IN (3,4,8)

--NOT IN
SELECT * FROM USERS WHERE GENDER NOT IN ('K')

---8)AGE KOLONU EKLEME
UPDATE USERS SET AGE=DATEDIFF(YEAR,BIRTHDATE,GETDATE())
SELECT * FROM USERS WHERE AGE IN (26)

--ALTER TABLE users DROP COLUMN age  --age kolonunu silme


--9)AND VE OR KULLANIMI
SELECT * FROM USERS WHERE GENDER='E' AND NAMESURNAME LIKE '%Ali%'

SELECT * FROM USERS WHERE GENDER='E' OR NAMESURNAME LIKE '%Ali%'

--10)DISTINCT KULLANIMI
SELECT DISTINCT AGE FROM USERS
SELECT DISTINCT GENDER FROM USERS

--11)ORDER BY
SELECT  * FROM USERS ORDER BY AGE ASC
SELECT  * FROM USERS ORDER BY AGE DESC
SELECT  * FROM USERS ORDER BY AGE

SELECT  * FROM USERS ORDER BY ID
SELECT  * FROM USERS ORDER BY ID DESC

--12)TOP KOMUTU
SELECT TOP 5 *  FROM USERS 

--13)AGGREGATE FUNCTIONS
---TABLOYU TANI
(SUM,COUNT,MIN,MAX,AVG)

--SUM
SELECT SUM(AMOUNT) FROM [dbo].[SALEORDERS]

--COUNT
SELECT COUNT(*) FROM [dbo].[SALEORDERS]

--MIN
SELECT MIN(LINETOTAL) FROM [dbo].[SALEORDERS]

--MAX
SELECT MAX(LINETOTAL) FROM [dbo].[SALEORDERS]

--AVG
SELECT AVG(LINETOTAL) FROM [dbo].[SALEORDERS]

---HEPSİ
SELECT SUM(AMOUNT),SUM(LINETOTAL),COUNT(*),MIN(LINETOTAL),MAX(LINETOTAL) FROM [dbo].[SALEORDERS]

SELECT SUM(AMOUNT) AS ADET,SUM(LINETOTAL) AS CIRO,COUNT(*) AS KAYITSAY,MIN(LINETOTAL) AS MINTUTAR,MAX(LINETOTAL) AS MAKSTUTAR FROM [dbo].[SALEORDERS]
WHERE CITY='SAMSUN'

--GROUP BY
SELECT CITY,SUM(AMOUNT)AS ADET FROM [dbo].[SALEORDERS]
GROUP BY CITY

SELECT CITY,SUM(AMOUNT)AS ADET FROM [dbo].[SALEORDERS]
WHERE BRAND='ULUDAG'
GROUP BY CITY

SELECT CITY,SUM(LINETOTAL)AS ADET FROM [dbo].[SALEORDERS]
WHERE BRAND='ULUDAG'  
GROUP BY CITY
HAVING SUM(LINETOTAL)>200

----DALIN MARKASININ GÜN BAZLI SATIŞ ADETLERİ
SELECT DAYOFWEEK_,SUM(AMOUNT)AS ADET FROM [dbo].[SALEORDERS]
WHERE BRAND='DALIN'  
GROUP BY DAYOFWEEK_ 

---ÜRÜN KATEGORİLERİNE GÖRE TOPLAM SATIŞLAR
SELECT CATEGORY1,CATEGORY2,CATEGORY3,SUM(AMOUNT)AS ADET FROM [dbo].[SALEORDERS]
WHERE BRAND='DALIN'  
GROUP BY CATEGORY1,CATEGORY2,CATEGORY3

--MÜŞTERİ SAYTISI
SELECT COUNT(DISTINCT USERNAME_) FROM [dbo].[SALEORDERS]

SELECT COUNT(USERNAME_) FROM [dbo].[SALEORDERS]
