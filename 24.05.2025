# 📊 Verinin Karar Yolculuğu

## 1. Collect (Veri Toplama)
Her sektörde ihtiyaç duyulan veriler farklı kaynaklardan toplanır.

**Örnek kaynaklar:**
- Log dosyaları  
- Sensör verileri  
- Kullanıcı girdileri  
- Sosyal medya  

---

## 2. Move/Store (Depolama)
Toplanan veriler bir veri kaynağında tarihsel olarak tutulmalıdır.

- Veri akışının sürdürülebilirliği için bir **pipeline (veri hattı)** kurulmalıdır.
- **Amaç:** Güvenli ve sürekli veri akışı sağlamak.

---

## 3. Explore/Transform (Keşfet / Dönüştür)
- Ham veriler üzerinde ihtiyaçlara göre dönüşüm ve temizleme işlemleri yapılır.
- Verinin işlenebilir formata gelmesi sağlanır.

> 🕒 Veri analizi sürecinin %70-85’i bu aşamada geçer.

---

## 4. Data Cleaning (Veri Temizliği)
Verilerde karşılaşılabilecek sorunlar:
- Eksik/kayıp, hatalı, tekrar eden ya da fazla özellikli veriler
- Çok büyük veri hacmi
- Format sorunları
- Güncel olmayan ya da çelişkili veriler

---

## 5. Aggregate/Label (Özetleme / Etiketleme)
- Temizlenen veriler analiz ve modelleme için hazırlanır.
- **Feature selection** (özellik seçimi) ve **labeling** (etiketleme) yapılır.

> Örnek: Görüntüdeki nesnelerin kutularla etiketlenmesi (object detection).

---

## 6. Learn/Optimize (Öğrenme / Optimizasyon)
- Hazırlanan veriler makine öğrenmesi algoritmalarıyla eğitilir.
- **Hedef:** Modeller kurarak öngörüler veya karar destek sistemleri geliştirmek.

---

## 7. Report (Raporlama)
- Model çıktıları ya da analiz sonuçları, iş birimlerinin kullanabileceği raporlar şeklinde sunulur.
- Görselleştirme: Grafikler, dashboard’lar, infografikler ile desteklenir.

---

# 📈 CRISP-DM Süreci – Veri Analizinde Yöntem

## 1. İşin Anlaşılması
- İş hedefleri netleştirilir.  
- Hangi sorulara cevap aranıyor?  
- Hangi problemler çözülmek isteniyor?

## 2. Verinin Anlaşılması
- Gerekli veriler toplanır, ilk inceleme yapılır.
- Veri tipleri, kalitesi, eksiklikleri analiz edilir.

## 3. Veri Hazırlama
- Modelleme için uygun hale getirilmiş veri hazırlanır.
- Temizleme, dönüştürme, seçme işlemleri yapılır.

## 4. Modelleme
- İstatistiksel ve makine öğrenmesi modelleri kurulur.
- Farklı algoritmalar denenir ve değerlendirilir.

## 5. Değerlendirme
- Modellerin performansı ölçülür.
- İş hedeflerine uygunluk test edilir.

## 6. Kullanıma Sunma
- Model sonuçları raporlanır ve sistem içine entegre edilir.

---

# 🗃️ Veri Tabanı – Temel Notlar

## 1. Veri Yönetimi ve Depolama
Veritabanı, bilgilerin düzenli, sistemli ve erişilebilir şekilde dijital olarak saklandığı ortamlardır.

**Amaç:** Verileri arama, düzenleme, analiz etme gibi işlemler için hazır tutmak.

---

## 2. Neden Veri Tabanı Kullanılır?
- Büyük veriyi düzenli tutmak  
- Veriye hızlı ve güvenli erişim sağlamak  
- Eşzamanlı çok kullanıcıyla çalışabilmek  
- Yedekleme ve hata önleme  

---

## 3. Veri Tabanı Bileşenleri

| Kavram   | Açıklama                                 |
|----------|------------------------------------------|
| Tablo    | Verilerin satır ve sütunlarla tutulduğu yapı |
| Satır    | Her bir kayıt (örnek: 1 müşteri)         |
| Kolon    | Kayıtların özellikleri (örnek: Ad, Soyad)|
| İndeks   | Veriyi sıralı ve hızlı erişilebilir tutan yapı |

---

## 4. Veri Tabanı Platformları

| Platform            | Açıklama                                           |
|---------------------|----------------------------------------------------|
| Microsoft SQL Server | Kurumsal Microsoft sistemleri için yaygın         |
| Oracle Database      | Büyük ve karmaşık sistemlerde tercih edilir       |
| MySQL                | Açık kaynak, web projelerinde yaygın              |
| PostgreSQL           | Güçlü, açık kaynaklı, veri tutarlılığı yüksek     |

---

## 5. Kullanım Alanları
- Sağlık sektörü  
- Finans ve bankacılık  
- E-ticaret ve perakende  
- Üretim ve sanayi  
- Kamu kurumları  
- Eğitim sektörü  
- Ulaşım ve lojistik  
- Telekomünikasyon  
- İnsan kaynakları  

---

# 💾 Temel SQL Komutları – Özet

## 🔍 Veri Sorgulama ve İşleme

| Komut     | Açıklama                                                  |
|-----------|-----------------------------------------------------------|
| SELECT    | Veritabanından kayıtları çeker.                           |
| WHERE     | Koşul belirterek veriyi filtreler.                        |
| ORDER B


/////////////////////////////////////////////////////////////////////////////////

-- MSreplication_options tablosundaki tüm kayıtları ve belirli sütunları listele
SELECT  
    optname,
    value,
    major_version,
    minor_version,
    revision,
    install_failures 
FROM MSreplication_options;


-- MSreplication_options tablosuna yeni bir kayıt ekler
INSERT INTO MSreplication_options (
    optname, value, major_version, minor_version, revision, install_failures
)
VALUES (
    'KIZBASINA', 1, 90, 0, 0, 0
);


-- 'KIZBASINA' adındaki kaydı getirir
SELECT * FROM MSreplication_options WHERE optname = 'KIZBASINA';


-- 'KIZBASINA' adındaki kaydın value sütununu 2 olarak günceller
UPDATE MSreplication_options
SET value = 2
WHERE optname = 'KIZBASINA';


-- Güncellemeden sonra 'KIZBASINA' adındaki kaydı tekrar kontrol eder
SELECT * FROM MSreplication_options WHERE optname = 'KIZBASINA';


-- 'KIZBASINA' adındaki kaydı siler
DELETE FROM MSreplication_options WHERE optname = 'KIZBASINA';


-- value değeri 1 olan kayıtları getirir (1'e eşit olanlar)
SELECT * FROM MSreplication_options WHERE value = 1;


-- value değeri 1'den farklı olan kayıtları getirir (1'e eşit olmayanlar)
SELECT * FROM MSreplication_options WHERE value <> 1;


-- value değeri 1'den büyük olan kayıtları getirir
SELECT * FROM MSreplication_options WHERE value > 1;


-- value değeri 0 ile 2 arasında olan kayıtları getirir (0, 1, 2 dahil)
SELECT * FROM MSreplication_options WHERE value BETWEEN 0 AND 2;


-- optname MER ile başlayan kayıtları getirir
SELECT * FROM MSreplication_options WHERE optname LIKE 'MER%';

-- optname GE ile biten kayıtları getirir
SELECT * FROM MSreplication_options WHERE optname LIKE '%GE';

-- optname içinde ER geçen kayıtları getirir
SELECT * FROM MSreplication_options WHERE optname LIKE '%ER%';


-- value değeri 1, 2 veya 3 olan kayıtları getirir
SELECT * FROM MSreplication_options WHERE value IN (1, 2, 3);


-- value değeri 1, 2 veya 3 olmayan kayıtları getirir
SELECT * FROM MSreplication_options WHERE value NOT IN (1, 2, 3);


-- spt_values tablosunda doğum tarihinden yaş hesaplayan (örnek) bir güncelleme sorgusu
-- UPDATE spt_values SET AGE = DATEDIFF(YEAR, BIRTHDATE, GETDATE())
-- (Not: Gerçek kullanım için BIRTHDATE alanının mevcut olması gerekir)


-- spt_values tablosundaki STATUS sütununda kaç farklı değer olduğunu bulur
SELECT DISTINCT status FROM spt_values;


-- spt_values tablosundaki tüm kayıtları 'number' sütununa göre azalan şekilde sıralar
SELECT * FROM spt_values ORDER BY number DESC;


-- 2020 yılına ait tüm ciroyu toplar ve TOTALLINETOTAL sütunu adıyla gösterir
SELECT SUM(linetotal) AS TOTALLINETOTAL FROM saleorders WHERE year_ = 2020;

-- 2020 yılında toplam kaç işlem yapıldığını sayar
SELECT COUNT(*) AS KAYIT FROM saleorders WHERE year_ = 2020;

-- 2020 yılında bir müşterinin yaptığı en az alışveriş tutarını bulur
SELECT MIN(linetotal) FROM saleorders WHERE year_ = 2020;

-- 2020 yılında bir müşterinin yaptığı en fazla alışveriş tutarını bulur
SELECT MAX(linetotal) FROM saleorders WHERE year_ = 2020;

-- 2020 yılında bir müşterinin ortalama alışveriş tutarını bulur
SELECT AVG(linetotal) FROM saleorders WHERE year_ = 2020;


-- 2020 yılına ait Samsun şehri için toplam ciro, işlem sayısı, minimum, maksimum ve ortalama tutarı getirir
SELECT 
    SUM(linetotal) AS TOTALLINETOTAL,
    COUNT(*) AS KAYIT,
    MIN(linetotal) AS MIN,
    MAX(linetotal) AS MAX,
    AVG(linetotal) AS AVG
FROM saleorders 
WHERE year_ = 2020 AND city = 'SAMSUN';


-- 2020 yılında her şehirde harcanan toplam parayı listeler
SELECT city, SUM(linetotal) 
FROM saleorders 
WHERE year_ = 2020 
GROUP BY city;


-- 2020 yılında şehir bazlı toplam harcama tutarını büyükten küçüğe sıralar
SELECT city, SUM(linetotal) 
FROM saleorders 
WHERE year_ = 2020 
GROUP BY city 
ORDER BY SUM(linetotal) DESC;


-- 2020 yılında her şehirde her markaya ne kadar harcama yapıldığını listeler, büyükten küçüğe sıralı
SELECT city, brand, SUM(linetotal) 
FROM saleorders 
WHERE year_ = 2020 
GROUP BY city, brand 
ORDER BY SUM(linetotal) DESC;


-- Dalin markasının haftanın hangi günlerinde daha çok satıldığını gösterir
SELECT dayofweek, SUM(amount) AS amount 
FROM saleorders 
WHERE brand = 'DALIN' 
GROUP BY dayofweek;

-- Dalin markasının kategori bazlı satış miktarlarını gösterir
SELECT category1, category2, category3, SUM(amount) AS amount 
FROM saleorders 
WHERE brand = 'DALIN' 
GROUP BY category1, category2, category3;
